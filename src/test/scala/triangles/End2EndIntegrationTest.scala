package triangles

import cats.Show
import cats.effect.testing.scalatest.AsyncIOSpec
import cats.effect.{ExitCode, IO}
import org.scalatest.Inside
import org.scalatest.funsuite.AsyncFunSuite
import org.scalatest.matchers.should.Matchers
import triangles.End2EndIntegrationTest.encodedTriangle

class End2EndIntegrationTest extends AsyncFunSuite with AsyncIOSpec with Matchers with Inside {

  test("End-to-End Integration Test") {

    implicit val miniConsole: TestMiniConsoleIO = new TestMiniConsoleIO
    val expected = "Minimal path is: " + Iterator.continually(1).take(50).mkString(" + ").appendedAll(" = 50")
    ProgramF.program[IO](IO.delay(encodedTriangle)).asserting { exitCode =>
      exitCode shouldBe ExitCode.Success
      miniConsole.prints should contain theSameElementsInOrderAs List(expected)
    }
  }


  class TestMiniConsoleIO extends MiniConsole[IO] {
    var prints = List.empty[String]
    var errors = List.empty[String]

    override def println[A](a: A)(implicit S: Show[A]): IO[Unit] = {
      prints = prints.appended(S.show(a))
      IO.unit
    }

    override def errorln[A](a: A)(implicit S: Show[A]): IO[Unit] = {
      errors = errors.appended(S.show(a))
      IO.unit
    }
  }
}


object End2EndIntegrationTest {

  val encodedTriangle: String =
    """
      |1
      |1 2
      |1 2 3
      |1 2 3 4
      |1 2 3 4 5
      |1 2 3 4 5 6
      |1 2 3 4 5 6 7
      |1 2 3 4 5 6 7 8
      |1 2 3 4 5 6 7 8 9
      |1 2 3 4 5 6 7 8 9 10
      |1 2 3 4 5 6 7 8 9 10 11
      |1 2 3 4 5 6 7 8 9 10 11 12
      |1 2 3 4 5 6 7 8 9 10 11 12 13
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
      |1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
      |""".stripMargin
}